<div class="container mt-4 playlist-show-container">

  <% unless [Playlist::LIKE_PLAYLIST_NAME, Playlist::DISLIKE_PLAYLIST_NAME].include?(@playlist.name) %>
    <!-- Conteneur bouton renommer aligné à droite, sous la navbar -->
    <div class="d-flex justify-content-end mb-2">
      <button id="rename-button" class="btn-icon" aria-label="Renommer la playlist" type="button">
        <i class="bi bi-pencil-square"></i>
      </button>
    </div>
  <% end %>

  <!-- Titre centré, qui revient à la ligne -->
  <h1 id="playlist-name" class="text-center mb-4" style="white-space: normal; word-break: break-word;">
    <%= @playlist.name %>
  </h1>

  <% unless [Playlist::LIKE_PLAYLIST_NAME, Playlist::DISLIKE_PLAYLIST_NAME].include?(@playlist.name) %>
    <%= form_with(model: @playlist, url: rename_playlist_path(@playlist), method: :patch, id: "rename-form", class: "d-none mb-4") do |form| %>
      <div class="input-group">
        <%= form.text_field :name, class: "form-control", id: "playlist-name-input" %>
        <button type="submit" class="btn btn-primary">Enregistrer</button>
        <button type="button" id="cancel-rename" class="btn btn-secondary">Annuler</button>
      </div>
    <% end %>
  <% end %>

  <% is_special_playlist = [Playlist::LIKE_PLAYLIST_NAME, Playlist::DISLIKE_PLAYLIST_NAME].include?(@playlist.name) %>

  <% unless is_special_playlist %>
    <div class="bulk-actions mt-3 mb-3 d-flex justify-content-center">
      <%= button_to "J'aime toutes les chansons", like_all_songs_playlist_items_path(playlist_id: @playlist.id), method: :post, class: "btn-aurora-like me-2", style: "width: 150px;" %>
      <%= button_to "J'aime aucune des chansons", dislike_all_songs_playlist_items_path(playlist_id: @playlist.id), method: :post, class: "btn-aurora-dislike", style: "width: 150px;" %>
    </div>
  <% end %>

  <div class="playlist-items-list" id="playlist_<%= @playlist.id %>">
    <%= render partial: "playlists/playlist_items" %>
  </div>

  <div class="mt-4 d-flex justify-content-start">
    <%= link_to "Générer une nouvelle playlist", new_playlist_path, class: "btn btn-primary btn-aurora-glow me-2" %>
    <%= link_to "Retour aux playlists", playlists_path, class: "btn btn-secondary btn-aurora-glow" %>
  </div>
</div>

<%= render "shared/bottom_navbar" %>

<script>
  document.addEventListener('turbo:load', initializePlaylistPage);
  document.addEventListener('turbo:render', initializePlaylistPage);

  function initializePlaylistPage() {
    // Initialize rename functionality
    const renameButton = document.getElementById('rename-button');
    const renameForm = document.getElementById('rename-form');
    const playlistNameSpan = document.getElementById('playlist-name');
    const cancelRenameButton = document.getElementById('cancel-rename');

    if (renameButton && renameForm && playlistNameSpan && cancelRenameButton) {
      renameButton.addEventListener('click', () => {
        renameForm.classList.remove('d-none');
        playlistNameSpan.classList.add('d-none');
        renameButton.classList.add('d-none');
      });

      cancelRenameButton.addEventListener('click', () => {
        renameForm.classList.add('d-none');
        playlistNameSpan.classList.remove('d-none');
        renameButton.classList.remove('d-none');
      });
    }

    // Initialize player buttons
    document.querySelectorAll('.play-btn').forEach(button => {
      button.addEventListener('click', handlePlayButtonClick);
    });

    // Handle like/dislike button clicks
    document.querySelectorAll('.like-btn, .dislike-btn').forEach(button => {
      button.addEventListener('ajax:success', handleLikeDislikeSuccess);
      button.addEventListener('ajax:before', handleLikeDislikeBefore);
    });
  }

  function handlePlayButtonClick(event) {
    const button = event.currentTarget;
    const audioId = button.dataset.audioId;
    const audio = document.getElementById('audio-' + audioId);
    const icon = button.querySelector('i');

    // Pause all other audio
    document.querySelectorAll('audio').forEach(a => {
      if (a !== audio) {
        a.pause();
        const btn = document.querySelector(`[data-audio-id="${a.id.replace('audio-', '')}"]`);
        if (btn) btn.querySelector('i').classList.replace('bi-pause-fill', 'bi-play-fill');
      }
    });

    if (audio.paused) {
      audio.play();
      icon.classList.replace('bi-play-fill', 'bi-pause-fill');
    } else {
      audio.pause();
      icon.classList.replace('bi-pause-fill', 'bi-play-fill');
    }

    audio.onended = () => {
      icon.classList.replace('bi-pause-fill', 'bi-play-fill');
    };
  }

  function handleLikeDislikeSuccess(event) {
    const button = event.currentTarget;
    const icon = button.querySelector('i');
    const isLikeButton = button.classList.contains('like-btn');

    // Update button state
    if (isLikeButton) {
      icon.classList.toggle('bi-hand-thumbs-up-fill');
      icon.classList.toggle('bi-hand-thumbs-up');
    } else {
      icon.classList.toggle('bi-hand-thumbs-down-fill');
      icon.classList.toggle('bi-hand-thumbs-down');
    }

    // Re-enable player buttons
    document.querySelectorAll('.play-btn').forEach(playBtn => {
      playBtn.disabled = false;
    });
  }

  function handleLikeDislikeBefore(event) {
    // Disable player buttons to prevent clicks during like/dislike
    document.querySelectorAll('.play-btn').forEach(playBtn => {
      playBtn.disabled = true;
    });
  }
</script>
